@using Microsoft.Extensions.Options
@inject IOptions<RosShop.App.Data.StripeSettings> Stripe
@model StripeModel

@{
	ViewData["Title"] = "StripePayment";
}

<h2>Stripe Payment</h2>


<div class="container">
	<div class="row">
		<div class="col-md-6 col-sm-offset-3">
			<h2>Stripe Form</h2>
			<form asp-area="ShopingCard" asp-controller="ShopingCard" asp-action="StripePayment" method="post" id="payment-form">
				<div class="form-group">
					<div>
						<label for="card-number">Card Number</label>
						<div id="card-number">

						</div>
					</div>
				</div>
				<div class="form-group">
					<label for="card-name">Name</label>
					<input type="text" name="cardName" class="form-control" id="card-name" placeholder="First and Second name" />
				</div>
				<div class="form-group">
					<div class="form-group">
						<div class="row">
							<div class="col-md-6">
								<label for="card-cvc">cvc</label>
								<div id="card-cvc">

								</div>
							</div>
							<div class="col-md-6">
								<label for="card-exp">exp</label>
								<div id="card-exp">

								</div>
							</div>
						</div>
					</div>
					<div id="card-errors" role="alert"></div>
				</div>
				<div class="form-group">
					<button class="form-control btn btn-primary">Submit Payment</button>
				</div>				
				
			</form>
		</div>
	</div>
</div>



<form asp-area="ShopingCard" asp-controller="ShopingCard" asp-action="StripePayment" method="post">
</form>
<div>
	<form asp-area="ShopingCard" asp-controller="ShopingCard" asp-action="StripePayment" method="post">
		<article>
			<label>Amount: $5.00</label>
		</article>
		<script src="//checkout.stripe.com/v2/checkout.js"
				class="stripe-button"
				data-key="@Stripe.Value.PublishableKey"
				data-local="auto"
				data-description="Sample Charge">

		</script>
	</form>
</div>

@section stripe{
	<script src="https://js.stripe.com/v3/"></script>

	<script>
		// Create a Stripe client.
		var stripe = Stripe('pk_test_ODaolVcBoP6bGy8JRORgZASz00bVj7bu9I');

		// Create an instance of Elements.
		var elements = stripe.elements();

		// Custom styling can be passed to options when creating an Element.
		// (Note that this demo uses a wider set of styles than the guide below.)
		var style = {
			base: {
				color: '#32325d',
				fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
				fontSmoothing: 'antialiased',
				fontSize: '16px',
				'::placeholder': {
					color: '#aab7c4'
				}
			},
			invalid: {
				color: '#fa755a',
				iconColor: '#fa755a'
			}
		};

		// Create an instance of the card Element.
		var card = elements.create('cardNumber', {
			classes: {
				base: "form-control",
				invalid: "error"
			}
		});

		var cvc = elements.create('cardCvc', {
			classes: {
				base: "form-control",
				invalid: "error"
			}
		});

		var exp = elements.create('cardExpiry', {
			classes: {
				base: "form-control",
				invalid: "error"
			}
		});

		

		// Add an instance of the card Element into the `card-element` <div>.
		card.mount('#card-number');
		cvc.mount('#card-cvc');
		exp.mount('#card-exp');

		// Handle real-time validation errors from the card Element.
		card.addEventListener('change', function (event) {
			var displayError = document.getElementById('card-errors');
			if (event.error) {
				displayError.textContent = event.error.message;
			} else {
				displayError.textContent = '';
			}
		});

		// Handle form submission.
		var form = document.getElementById('payment-form');
		form.addEventListener('submit', function (event) {
			event.preventDefault();

			stripe.createToken(card).then(function (result) {
				if (result.error) {
					// Inform the user if there was an error.
					var errorElement = document.getElementById('card-errors');
					errorElement.textContent = result.error.message;
				} else {
					// Send the token to your server.
					stripeTokenHandler(result.token);
				}
			});
		});

		// Submit the form with the token ID.
		function stripeTokenHandler(token) {
			// Insert the token ID into the form so it gets submitted to the server
			var form = document.getElementById('payment-form');
			var hiddenInput = document.createElement('input');
			hiddenInput.setAttribute('type', 'hidden');
			hiddenInput.setAttribute('name', 'StripeToken');
			hiddenInput.setAttribute('value', token.id);
			form.appendChild(hiddenInput);

			// Submit the form
			form.submit();
		}
	</script>
}